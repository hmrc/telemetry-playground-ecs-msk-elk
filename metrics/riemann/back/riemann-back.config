; -*- mode: clojure; -*-
; vim: filetype=clojure

; Riemann kafka consumer

(def BOOTSTRAP_SERVERS (System/getenv "BOOTSTRAP_SERVERS"))

(logging/init {:console? true})

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index
)))

(def graph
  (graphite {:host "graphite"}))

; Pull from kafka topic "metrics"
(kafka-consumer {
  :consumer.config {
    :security.protocol "SSL"
    :ssl.truststore.location "/etc/ssl/certs/java/cacerts"
    :ssl.client.auth "requested"
    :bootstrap.servers BOOTSTRAP_SERVERS
    :group.id "metrics"
  }
  :topics ["metrics"]})

; Stream to graphite
(streams
  ; Print event to stdout
  prn
  graph
)
